# -*- coding: utf-8 -*-
"""6140 project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1nNG2gY5iRTR_L1KI-mZPP-NDuQkPSyUz
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn import tree
from sklearn import metrics
from sklearn.decomposition import PCA
from sklearn.model_selection import KFold
from sklearn.model_selection import train_test_split
from sklearn.neighbors import KNeighborsClassifier
pd.options.display.max_columns = None
pd.options.display.max_rows = None

#upload data.cvs file
from google.colab import files
uploaded = files.upload()

#drop unnessasary columns
data = pd.read_csv('quay_data.csv')


data = data.drop(columns=[
                         'AGE_PERCENTIL',
                         'GENDER',
                         'Unnamed: 0'])
data.shape

#get the dataset which only include 0-2 windows for every patient
first = data[data['WINDOW'] == '0-2']

#drop window column from first dataset
first = first.drop(columns=['WINDOW'])
first = first.drop(columns=['ICU'])

first.shape

# sperate x, y taining and test set
# get train and test, 
# then standard train and test respectively
# apply knn
train, test = train_test_split(first, test_size=0.3, random_state=0)

#get train_data, train_label

#get test_data, test_label
train_data = train.drop(columns=[
                         'ever_icu'])
train_label = train[['ever_icu']]

test_data = test.drop(columns=[
                         'ever_icu'])
test_label = test[['ever_icu']]

# #normalize train data and test data
sc = StandardScaler()
train_data = sc.fit_transform(train_data)
test_data = sc.fit_transform(test_data)
train_data.shape

#get top 5 related features from PCA
pca = PCA(n_components=5)
train_data = pca.fit_transform(train_data)
test_data = pca.transform(test_data)

#get knn method

def get_knn(neighbors, train_data, test_data, train_label, test_label):
  knn = KNeighborsClassifier(n_neighbors=neighbors)
  knn.fit(train_data, train_label)
  knn.score(test_data,test_label)
  return knn.score(test_data,test_label)

lst1 = []
lst2 = []
for i in range (1, 269):
  lst1.append(i)
  accuracy = get_knn(i, train_data, test_data, train_label, test_label)
  lst2.append(accuracy)

plt.plot(lst1, lst2)
plt.xlabel("k value")
plt.ylabel("Accuracy")

k14 = get_knn(14, train_data, test_data, train_label, test_label)
k14